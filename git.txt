Git Definition:

Git is a version-control system for tracking changes in computer files and coordinating work on those files among multiple people. It is primarily used for source-code management in software development, but it can be used to keep track of changes in any set of files.

Advantages:

* Branching capabilities
* Git branches are cheap and easy to merge. 
* Distributed model: 
		This means your work is your own. You can let others see only what is necessary. Not everything has to be public. There are other advantages to the distributed model, such as the speed (since most everything is local) and possibility of working offline
* Branching and merging are easy:
		 Branching is a walk in the park. It feels like a natural part of the workflow. They are cheap (fast and consume very little space) so that you can branch whenever you want. This means you can sandbox your features and ideas till they are ready for the mainstream.
* Workflow is flexible:
		 Compared to Centralized VCS, git has the qualities that allow to choose your own workflow. It can be as simple as a centralised workflow to as hierarchical as the dictator-lieutenant workflow. Use the process that best fits you.
* Data integrity is assured:
		 Because git uses SHA1 trees, data corruption due to external reasons can be easily detected.
* Icing on the cake:
	-> Fast: Git is very fast, even when compared to other DVCS, for local as well as network operations
	-> Staging area: Make sure your commits have logically grouped changes and not everything else you are working on.
	-> Free: I am sure you dont want to spend 450$ for your personal project. Your manager will appreciate it if you save him N x 450$

Disadvantages:

* Steep learning curve: 
		Many commands with many options, some commands are non-intuitive and need a level of understanding the internals of git, commands and arguments are inconsistent to some degree
* Binary files are a big no:
		 If your project has non-text files that are updated frequently (images for websites or MS Office documents), then git becomes bloated and slow. (I believe it still does better than most systems)

Git Commands:

Creating local repository:
				git init
Check out a repository:		
				git clone/path/to/repository
Add files:
		Adding one file:
					git add <filename>
		Adding more than one file:
					git add *
Commit:
		Commit changes to head(but not yet to the remote repository)
		Syntax:
			git commit -m "commit message"
Push:
		send changes to your master branch of your remote repository.
		Syntax:
			git push origin master
Status:
		List the files you've changed and those you still need to add or commit
		Syntax:
			git status
Connect to a remote repository:
				If you haven't connected your local repository to a remote server, add the server to be able to push to it.
				Syntax:
					git remote add origin <server>
				* List all currently configured remote repositories.
				Syntax:
					git remote -v
Search:
	Search the working directory for
	Syntax:
		git grep "foo()"
Undo local changes:
			*If you mess up, you can replace the changes in your working tree with the last content in head.
			*Changes already added to the index, as well as new files, will be kept.
			Syntax:
				git checkout -- <filename>
			* Instead, to drop all your local changes and commits, fetch the latest history from the server and point your local master branch at it, do this.
			Syntax:
				git fetch origin

				git reset --hard origin/master
Branches:
	* Create a new branch and switch to it.
	Syntax:
		git checkout -b <branchname>
	* Switch from one branch to another:
		git checkout <branchname>
	* List all the branches in your repo, and also tell you what branch you're currently in.
		git branch
	* Delete the feature branch.
		git branch -d <branchname>
	* Push the branch to your remote repository, so others can use it.
		git push origin <branchname>
	* Push all branches to your remote repository
		git push --all origin
	* Delete a branch on your remote repository.
		git push origin :<branchname>
Update from the remote repository:
				* Fetch and merge changes on the remote server to your working directory.
					git pull
				* To merge a different branch into your active branch
					git merge <branchname>
				* 
